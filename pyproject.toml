[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
sources = ["src"]
include = ["src/saleor_sdk/**/*.py"]
exclude = ["tests"]

[project]
name = "saleor-sdk-python"
version = "0.2.1"
description = "A set of helpers and tools for a Saleor related Python project."
authors = [{ name = "Mirumee Software", email = "hello@mirumee.com" }]
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click~=8.0",
    "toml~=0.10",
    "pydantic~=2.0",
    "cryptography>=39",
    "pyjwt~=2.8",
]
requires-python = ">=3.10"

[project.urls]
"Repository" = "https://github.com/mirumee/saleor-sdk-python"
"Bug Tracker" = "https://github.com/mirumee/saleor-sdk-python/issues"
"Community" = "https://github.com/mirumee/saleor-sdk-python/discussions"

[project.scripts]
saleor-sdk = 'saleor_sdk.console.app:cli'

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=7.3",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
    "pytest-sugar",
    "ipdb",
    "ipython",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:src}"
test-cov = "coverage run -m pytest {args:src}"
cov-report = ["- coverage combine", "coverage report --fail-under=50"]
cov-report-html = ["- coverage combine", "coverage html -d src/saleor_sdk/.cov"]
cov = ["test-cov", "cov-report-html"]
cov-check = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs-material~=8.0",
    "mdx-include~=1.4.2",
    "pygments-graphql~=1.0.0",
    "mkdocs-awesome-pages-plugin~=2.8.0",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

[tool.hatch.envs.lint]
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
    "pydantic>=2.4.2",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy {args:src}"
style = ["ruff {args:src}", "black --check --diff {args:src}"]
fmt = ["black {args:src}", "ruff --fix {args:src}", "style"]
all = ["style", "typing"]

[tool.hatch.envs.examples]
dependencies = ["httpx", "fastapi", "uvicorn", "pydantic-settings"]

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.isort]
profile = "black"

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["saleor_sdk"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["saleor_sdk"]
branch = true
parallel = true

[tool.coverage.paths]
saleor_sdk = ["src/saleor_sdk"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ["tests"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
